#version 430

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

uniform dvec2 fractalTL;
uniform double xScale;
uniform double yScale;
uniform int iterations;


layout(std140, binding = 3) buffer layoutName
{
    dvec2 randPoints[];
};

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}


int mandelbrotIterations(inout dvec2 fractalCoord)
{
	dvec2 z = dvec2(0.0, 0.0);
	dvec2 c = fractalCoord;

	double result = 0.0;
	int n = 0;
	for (; n <= iterations && result < 4.0; n++)
	{
        double zRealTmp = z.x;
        z.x = (zRealTmp * zRealTmp) - (z.y * z.y) + c.x;
        z.y = 2.0 * zRealTmp * z.y + c.y;
		result = dot(z, z);
	}
	return n;
}

void mandelbrotRecord(inout dvec2 fractalCoord)
{	
	dvec2 z = dvec2(0.0, 0.0);
	dvec2 c = fractalCoord;
	
	for (int n = 0; n < iterations && dot(z, z) < 4.0; n++)
	{
		double zRealTmp = z.x;
		z.x = (zRealTmp * zRealTmp) - (z.y * z.y) + c.x;
		z.y = 2.0 * zRealTmp * z.y + c.y;

		ivec2 coord = ivec2((z.x  -fractalTL.x)  / xScale ,(z.y- fractalTL.y ) / yScale );
		vec4 current = imageLoad(img_output, coord);
			
		
		imageStore(img_output, coord, vec4(current.x + 1, 0.0, 0.0, 0.0) );
	}
}

bool inMainCardioid(inout dvec2 fractalCoord) {
  // This algorithm was taken from the Wikipedia Mandelbrot set page.
  double imag_squared = fractalCoord.y * fractalCoord.y;
  double q = (fractalCoord.x - 0.25);
  q = q * q + imag_squared;
  return q * (q + (fractalCoord.x - 0.25)) < (imag_squared * 0.25);
}

bool inOrder2Bulb(inout dvec2 fractalCoord) 
{
  double tmp = fractalCoord.x + 1;
  tmp = tmp * tmp;
  return (tmp + (fractalCoord.y * fractalCoord.y)) < (1.0 / 16.0);
}

void main() 
{
	dvec2 id = gl_GlobalInvocationID.xy;

	dvec2 scaledOffset = dvec2(id.x * xScale, id.y * yScale );
	dvec2 fractalCoord = dvec2(fractalTL + scaledOffset);

	// If we are in the main cardioid or order 2 bulb we will not be able to escape
	if ( inMainCardioid(fractalCoord) || inOrder2Bulb(fractalCoord) ) return;

	const int iterationsRequired = mandelbrotIterations(fractalCoord);
	
	// We never escaped or too quickly, so it is a bad point for us
	if ( iterationsRequired < 25 || iterationsRequired >= iterations ) return;

	mandelbrotRecord(fractalCoord);

}
